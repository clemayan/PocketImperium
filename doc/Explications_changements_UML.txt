Comparaison entre la première version et la version finale du diagramme UML : 

Entre la première version du diagramme UML et sa version finale, plusieurs changements significatifs ont été apportés pour répondre aux besoins du projet et améliorer sa structure.

Tout d'abord, l'ajout le plus notable est celui de plusieurs classes dédiées à la gestion de l'interface graphique. Initialement, la conception du projet ne prévoyait pas l’intégration d’une interface utilisateur. Cependant, pour rendre le jeu plus interactif et accessible, nous avons ajouté les classes FenetreMenu, Fenetre et FenetreClassement, permettant ainsi une gestion claire et structurée des différentes fenêtres de l'application.

De plus, des classes d'exceptions ont été intégrées dans la version finale. Cette modification découle de notre prise de conscience progressive de leur importance pour gérer les erreurs et respecter les consignes spécifiques du jeu Pocket Imperium. Ces classes permettent de mieux contrôler les situations exceptionnelles et d’assurer une robustesse accrue du code.

Un autre ajout majeur concerne les classes Observer et Observable, qui soulignent notre volonté d’appliquer le design pattern Observer. Leur présence dans le diagramme reflète notre compréhension et l’utilisation de ce pattern pour coordonner efficacement l es interactions entre la vue et le modèle.

Naturellement, au fur et à mesure de l’avancement du projet, de nouvelles méthodes ont été intégrées aux classes pour répondre aux besoins fonctionnels du jeu. Ces méthodes facilitent une gestion plus précise et plus cohérente des différentes fonctionnalités que nous n'avions pas envisagées au départ.

Dans le cadre de l'application du design pattern Strategy, la classe StratégieHumain a été ajoutée. Elle permet de représenter une stratégie spécifique adoptée par les joueurs humains et garantit une flexibilité dans l’évolution du comportement du jeu.

L’introduction des classes Action et de l’énumération Moment a été cruciale pour établir un lien clair entre la vue et le modèle. Ces éléments jouent un rôle clé dans la gestion et l’affichage des actions à l'écran, rendant le jeu plus intuitif et organisé.

Enfin, le changement le plus significatif est sans doute l’ajout de la classe Hexagone. Durant l'implémentation, il est devenu évident qu'une gestion individualisée de chaque hexagone était indispensable pour structurer le code de manière optimale. Cette classe permet de modéliser efficacement la carte du jeu, facilitant ainsi le placement et les interactions entre les différents éléments.

En résumé, ces ajustements et ajouts au diagramme UML ont permis d’améliorer la clarté, la modularité et la robustesse de la conception, tout en respectant les contraintes spécifiques du projet et en intégrant des principes avancés de conception logicielle.